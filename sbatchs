#!/usr/bin/env bash 

#---------- Set Default Values
DEBUG=0
CORES=1
PARTITION=short
WALLTIME=24

#---------- Colors
RED() { echo "$(tput setaf 1)$*$(tput sgr0)"; }
GREEN() { echo "$(tput setaf 2)$*$(tput sgr0)"; }
MAGENTA() { echo "$(tput setaf 5)$*$(tput sgr0)"; }
CYAN() { echo "$(tput setaf 6)$*$(tput sgr0)"; }

#---------- Usage
usage()
{
	CYAN '------------------------------  SBATCH SUBMITTER HELP ------------------------------ 
---------- PROGRAM		== sbatchs (sbatch submitter)
---------- VERSION		== 1.0.0
---------- DATE			== 2023_04_20
---------- CONTACT		== kew24 (template from lee.marshall@vai.org -- big thank you!)
---------- DISCRIPTION		== automates creation and submition of slurm sbatch scripts
---------- PATH			== export PATH=\$PATH:/path/to/sbatchs/directory

-------------------- COMMANDS --------------------
---------- USAGE		== sbatchs [options]* -s "command"
---------- FLAGS
	[ -d | --debug ]		== creates job script but does not execute
	[ -h | --help ]			== help function
---------- OPTIONS
	[ -a | --array <file> ]		== file containing column of sample names for array, 
						use SAMPLE as variable for sample name in command or script
	[ -c | --cores <int> ]		== number of cores per job 1 to 80, default 1 core
	[ -n | --name <name> ]		== name specific to job, default user name and date
	[ -p | --partition <name> ]	== specify partition name, default any partition
	[ -r | --rscript <"command"> or <file> ]	== command enclosed in double quotes or script file		
	[ -s | --script <"command"> or <file> ]	== command enclosed in double quotes or script file
	[ --script_args <args> ]	== positional arguments passed to your bash script file
	[ -w | --walltime <int> ]	== number of hours per job 1 to 336, default 24 hours

-------------------- MULTIPLE COMMANDS --------------------
---------- USAGE		== containg multiple compands with double quotes, 
					with each command on seperate line, see example
---------- COMMAND VARIABLES	== must start with a backslash \$1

-------------------- EXAMPLES --------------------
touch sample_data.txt
sbatchs -n gzip_file -s "gzip sample_data.txt"

touch sample1_data.txt
touch sample2_data.txt
echo sample1 > sample_names
echo sample2 >> sample_names
sbatchs -n zip_comand -a sample_names -s "zip SAMPLE_data.zip SAMPLE_data.txt"

echo "zip SAMPLE_data.zip SAMPLE_data.txt" > sample_script
sbatchs -n zip_script -a sample_names -s sample_script -d
------------------------------  SBATCH SUBMITTER HELP ---------------------------KEW24'
	exit 2
}

#---------- Set Arguments
PARSED_ARGUMENTS=$(getopt -a -n sbatchs -o dha:c:n:p:r:s:w: --long debug,help,array:,cores:,name:,partition:,rscript:,script:,script_args:,walltime: -- "$@")

VALID_ARGUMENTS=$?
if [ "$VALID_ARGUMENTS" != "0" ]; then
	RED "---------- INVALID ARGUMENTS ----------"
	usage
fi

eval set -- "$PARSED_ARGUMENTS"
while :
do
  case "$1" in
    -d | --debug)      DEBUG=1         ; shift   ;;
    -h | --help)       usage           ; shift   ;;
    -a | --array)      ARRAY="$2"      ; shift 2 ;;
    -c | --cores)      CORES="$2"      ; shift 2 ;;
    -n | --name)       NAME="$2"       ; shift 2 ;;
    -p | --partition)  PARTITION="$2"  ; shift 2 ;;
    -r | --rscript)    RSCRIPT="$2"    ; shift 2 ;;
    -s | --script)     SCRIPT="$2"     ; shift 2 ;;
    --script_args)     ARGS+=("$2")    ; shift 2 ;;
    -w | --walltime)   WALLTIME="$2"   ; shift 2 ;;
    # -- means the end of the arguments; drop this, and break out of the while loop
    --) shift; break ;;
    # If invalid options were passed, then getopt should have reported an error,
    # which we checked as VALID_ARGUMENTS when getopt was called...
    *) RED "---------- UNEXPECTED ARGUMENTS == $1 ----------"
       usage ;;
  esac
done

#---------- Functions
SCRIPT_START () {
echo '#!/usr/bin/env bash 
#SBATCH --nodes=1
#SBATCH --ntasks=1
#BATCH --cpus-per-task='${CORES}'
#SBATCH --time='${WALLTIME}':00:00
#SBATCH -J '${NAME}'
#SBATCH -p '${PARTITION}'
#SBATCH --output=%x.o%j
#SBATCH --error=%x.e%j
#SBATCH --chdir=.
#SBATCH --export=ALL'
}

SCRIPT_START_ARRAY () {
echo '#SBATCH --array 1-'${SAMPLE_NUMBER}''
}

SCRIPT_INFO () {
echo '
#-------------------- SBATCH VARIABLES --------------------
#- #SBATCH --nodes=1 == 1 node
#- #SBATCH --ntasks=1 == 1 task
#- #SBATCH --cpus-per-task=1 == 1 cpu per task
#- #SBATCH --time=24:00:00 == 24 hours max runtime
#- #SBATCH --partition=short == choose partition short < 168hrs, long > 168hrs (sinfo)
#- #SBATCH -J Job_Name_Here == job name sepcific to your script
#- #SBATCH --array=1-20 == 20 samples and 20 jobs to submit
#- #SBATCH --mail-user=First_Name.LastName@vai.org == vai email
#- #SBATCH --mail-type=ALL == email at all events (NONE, BEGIN, END, FAIL, REQUEUE, ALL)
#- #SBATCH --chdir=. == stay at directory when moving to a node
#- #SBATCH --export=ALL == head node environment passed to job node environment

#-------------------- JOB INFO --------------------
echo -n "---------- START TIME == " ; date +"%Y_%m_%d %H:%M:%S"
echo "---------- USER == ${USER}"
echo "---------- HOSTNAME == ${HOSTNAME}"
echo "---------- SLURM_JOB_NAME == ${SLURM_JOB_NAME}"
echo "---------- SLURM_JOB_ID == ${SLURM_JOB_ID}"
echo "---------- SLURM_JOB_CPUS_PER_NODE == ${SLURM_JOB_CPUS_PER_NODE}"
echo "---------- SLURM_JOB_PARTITION == ${SLURM_JOB_PARTITION}"
echo "---------- SLURM_SUBMIT_DIR == ${SLURM_SUBMIT_DIR}"
echo "---------- PWD == ${PWD}"

#-------------------- SBATCH COMMAND --------------------
echo "---------- SBATCH COMMAND == sbatch '${NAME}'.sh"
'
}

SCRIPT_ARRAY () {
echo '
#-------------------- SBATCH ARRAY --------------------
echo "---------- SLURM_ARRAY_TASK_ID == ${SLURM_ARRAY_TASK_ID}"
SBATCH_ID=`head -n ${SLURM_ARRAY_TASK_ID} '${ARRAY}' | tail -n1`
echo "---------- SBATCH_ID == ${SBATCH_ID}"'
}

SCRIPT_FILE () {
echo "
#-------------------- SCRIPT FILE --------------------
echo \"---------- SCRIPT FILE == ${SCRIPT}\"	
echo \"---------- SAMPLE SCRIPT == bash ${NAME}_\${SBATCH_ID}.sh\"
scp ${SCRIPT} ${NAME}_\${SBATCH_ID}.sh 
chmod +x ${NAME}_\${SBATCH_ID}.sh
sed -i 's/SAMPLE/'\${SBATCH_ID}'/g' ${NAME}_\${SBATCH_ID}.sh
bash ${NAME}_\${SBATCH_ID}.sh $(echo \"${ARGS[@]}\" | sed 's/ /\" \"/')"
}

SCRIPT_COMMAND () {
echo '
#-------------------- SCRIPT COMMAND --------------------
echo "---------- SCRIPT COMMAND == '${SCRIPT}'"
'${SCRIPT}''
}

RSCRIPT_FILE () {
echo "
#-------------------- R SCRIPT FILE --------------------
echo \"---------- R SCRIPT FILE == ${RSCRIPT}\"	
echo \"---------- R SAMPLE SCRIPT == R --vanilla < ${NAME}_\${SBATCH_ID}.R\"
scp ${RSCRIPT} ${NAME}_\${SBATCH_ID}.R 
chmod +x ${NAME}_\${SBATCH_ID}.R
sed -i 's/SAMPLE/'\${SBATCH_ID}'/g' ${NAME}_\${SBATCH_ID}.R
R --vanilla < ${NAME}_\${SBATCH_ID}.R"
}

RSCRIPT_COMMAND () {
echo "
#-------------------- R SCRIPT COMMAND --------------------
echo \"---------- R SCRIPT COMMAND == R --vanilla < ${NAME}.R < ${RSCRIPT}\"
R --vanilla < ${NAME}.R"
}

SCRIPT_END () {
echo '
#-------------------- JOB INFO --------------------
echo -n "---------- SCONTROL == " ;  scontrol show jobid -dd ${SLURM_JOB_ID}
echo "---------- PATH == ${PATH}"
echo -n "---------- END TIME == " ; date +"%Y_%m_%d %H:%M:%S"
'
}

#---------- Check Arguments
CYAN "------------------------------ SBATCH SUBMITTER ------------------------------
---------- SBATCHS ARGUMENTS == $PARSED_ARGUMENTS"

#---------- NAME
if [ ${NAME} ]
	then
	CYAN "---------- JOBNAME == ${NAME} ----------"
else
	NAME=`echo -n "${USER}" ; date +"_%Y_%m_%d_%H_%M_%S"`
	CYAN "---------- DEFAULT JOBNAME == ${NAME} ----------"
fi

#---------- PARTITION 
if [ ${PARTITION} = short ]
	then
	CYAN "---------- DEFAULT PARTITION == ${PARTITION} ----------"
else
	CYAN "---------- PARTITION == ${PARTITION} ----------"
fi

#---------- CORES
if [ ${CORES} == 1 ]
	then	
	CYAN "---------- DEFAULT CORES == ${CORES} ----------"
else
	if [ ${CORES} -gt 0 -a ${CORES} -le 80 ]
		then
		CYAN "---------- CORES == ${CORES} ----------"
	else
		RED "---------- CORES == ${CORES} ----------"
		RED "---------- [[ERROR]] CORES NOT GIVEN BETWEEN 1-80 ----------"
		exit 0
	fi
fi	

#---------- WALLTIME 
if [ ${WALLTIME} == 24 ]
	then
	CYAN "---------- DEFAULT WALLTIME == ${WALLTIME} ----------"
else
	if [ ${WALLTIME} -gt 0 -a ${WALLTIME} -le 336 ]
		then
		CYAN "---------- WALLTIME == ${WALLTIME} ----------"
	else
		RED "---------- WALLTIME == ${WALLTIME} ----------"
		RED "----------[[ERROR]] WALLTIME HOURS NOT BETWEEN 1-336 ----------"
		exit 0
	fi
fi

#---------- SCRIPT_ARGS 
if [ ${ARGS} ]
	then
	CYAN "---------- SCRIPT_ARGS == ${ARGS[@]} ----------"
fi

#---------- ARRAY
if [[ ( -f "${ARRAY}" && -s "${ARRAY}" ) ]]
	then
	CYAN "---------- ARRAY FILE == ${ARRAY} ----------"
	CYAN "---------- SAMPLE == used as variable for sample name ----------"
	SAMPLE_NUMBER=`cat ${ARRAY} | wc -l`
	CYAN "---------- SAMPLE_NUMBER == ${SAMPLE_NUMBER} ----------"
	#---------- Build JOB
	SCRIPT_START > ${NAME}.sh
	SCRIPT_START_ARRAY >> ${NAME}.sh
	SCRIPT_INFO >> ${NAME}.sh
	SCRIPT_ARRAY >> ${NAME}.sh
	#---------- SCRIPT + RSCRIPT
	if [ -n "${SCRIPT}" ] 
		then
		if [[ ( -f "${SCRIPT}" && -s "${SCRIPT}" ) ]]
			then 
			CYAN "---------- SCRIPT FILE == ${SCRIPT} ----------"
			SCRIPT_FILE >> ${NAME}.sh
		else
			SCRIPT=$(echo $SCRIPT | sed 's/SAMPLE/\${SBATCH_ID}/g')
			CYAN "---------- SCRIPT COMMAND == ${SCRIPT} ----------"
			SCRIPT_COMMAND >> ${NAME}.sh
		fi
	elif [ -n "${RSCRIPT}" ]
		then
		if [[ ( -f "${RSCRIPT}" && -s "${RSCRIPT}" ) ]]
			then 
			CYAN "---------- R SCRIPT FILE == R --vanilla < ${RSCRIPT} ----------"
			RSCRIPT_FILE >> ${NAME}.sh
		else
			echo ${RSCRIPT} | sed 's/SAMPLE/\${SBATCH_ID}/g' > ${NAME}.R 
			CYAN "---------- R SCRIPT COMMAND == R --vanilla < ${NAME}.R < ${RSCRIPT} ----------"
			RSCRIPT_COMMAND >> ${NAME}.sh
		fi
	else
		RED "---------- [[ERROR]] NO SHELL SCRIPT OR R SCRIPT ----------"
		exit 0
	fi
	#---------- Build JOB
	SCRIPT_END >> ${NAME}.sh
	chmod u+x ${NAME}.sh	
else
	CYAN "---------- DEFAULT ARRAY == NO ARRAY ----------"
	#---------- Build JOB
	SCRIPT_START > ${NAME}.sh
	SCRIPT_INFO >> ${NAME}.sh
	#---------- SCRIPT + RSCRIPT
	if [ -n "${SCRIPT}" ] 
		then
		if [[ ( -f "${SCRIPT}" && -s "${SCRIPT}" ) ]]
			then 
			CYAN "---------- SCRIPT FILE == bash ${SCRIPT} ----------"
			SCRIPT_FILE >> ${NAME}.sh
		else
			CYAN "---------- SCRIPT COMMAND == ${SCRIPT} ----------"
			SCRIPT_COMMAND >> ${NAME}.sh
		fi
	elif [ -n "${RSCRIPT}" ]
		then
		if [[ ( -f "${RSCRIPT}" && -s "${RSCRIPT}" ) ]]
			then 
			CYAN "---------- R SCRIPT FILE == R --vanilla < ${RSCRIPT} ----------"
			RSCRIPT_FILE >> ${NAME}.sh
		else
			CYAN "---------- R SCRIPT COMMAND == R --vanilla < ${NAME}.R < ${RSCRIPT} ----------"
			echo ${RSCRIPT} > ${NAME}.R 
			RSCRIPT_COMMAND >> ${NAME}.sh
		fi
	else
		RED "---------- [[ERROR]] NO SHELL SCRIPT OR R SCRIPT ----------"
		exit 0
	fi
	#---------- Build JOB
	SCRIPT_END >> ${NAME}.sh
	chmod u+x ${NAME}.sh
fi

#---------- SBATCH
if [[ ( -f "${NAME}.sh" && -x "${NAME}.sh" && -s "${NAME}.sh" ) ]]
then
	CYAN "---------- SBATCH == sbatch ${NAME}.sh ----------"
	if [ ${DEBUG} == 1 ]
		then 
		MAGENTA "---------- DEBUG == file created, not submitted ----------"
	else
		GREEN "---------- Job ID == " ; sbatch ${NAME}.sh
	fi
else
	RED "---------- [[ERROR]] SHELL FILE NOT CREATED, EMPTY OR EXECUTABLE ----------"
	exit 0
fi
CYAN "------------------------------ SBATCH SUBMITTER ---------------------------KEW24"
